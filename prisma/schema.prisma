datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id               Int                @id @default(autoincrement())
  username         String             @unique
  email            String             @unique
  password         String
  active           Boolean            @default(false)
  verifyEmail      Boolean            @default(false)
  verifyContact    Boolean            @default(false)
  isAdmin          Boolean            @default(false)
  name             String?
  avatar           String?
  phoneNumber      String?
  addressId        Int?
  role             Role[]
  reviews          Review[]
  orders           Order[]
  sessions         Session[]
  notificationSent NotificationSent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address? @relation(fields: [addressId], references: [id])
}

model Role {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  permissionsOnRole PermissionsOnRole[]
  userId    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
}

model PermissionsOnRole {
  roleId       Int
  permissionId Int
  mode         PermMode

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Permission {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  permissionsOnRole PermissionsOnRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id       Int     @id @default(autoincrement())
  street   String?
  district String?
  city     String?
  user     User[]
  order    Order[]
}

model Session {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  deviceId     String
  expires      DateTime
  userId       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id             Int                    @id @default(autoincrement())
  name           String
  sku            String                 @unique
  price          Decimal?
  discount       Float?
  qty            Int?
  avgRating      Float                  @default(0.0)
  sold           Int                    @default(0)
  brandId        Int?
  description    String?
  specification  String?
  categories     CategoriesOnProducts[]
  reviews        Review[]
  snapshots      ProductSnapshot[]
  productsOnCart ProductsOnCart[]
  coupons        Coupon[]
  colors         ProductColor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brand Brand? @relation(fields: [brandId], references: [id])
}

model ProductColor {
  id        Int      @id @default(autoincrement())
  name      String
  color     String
  images    String[]
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String
  expires   DateTime
  productId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductSnapshot {
  id        Int @id @default(autoincrement())
  productId Int
  orderId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int                    @id @default(autoincrement())
  name     String
  products CategoriesOnProducts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoriesOnProducts {
  productId  Int
  categoryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model Review {
  id        Int    @id @default(autoincrement())
  content   String
  userId    Int
  productId Int
  rating    Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                Int               @id @default(autoincrement())
  orderDetailId     Int               @unique
  orderStatus       OrderStatus
  userId            Int?
  paymentsId        Int
  shippingMethodId  Int
  shippingAddress   Address           @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId Int
  productSnapshots  ProductSnapshot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Payments       Payment        @relation(fields: [paymentsId], references: [id])
  shippingMethod ShippingMethod @relation(fields: [shippingMethodId], references: [id])
}

model Cart {
  id             Int              @id @default(autoincrement())
  productsOnCart ProductsOnCart[]
}

model ProductsOnCart {
  productId Int
  cardId    Int
  qty       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart    Cart    @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@id([productId, cardId])
}

model ShippingMethod {
  id    Int     @id @default(autoincrement())
  name  String
  Order Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id     Int         @id @default(autoincrement())
  name   String
  type   PaymentType
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id               Int                @id @default(autoincrement())
  title            String
  content          String
  url              String
  type             NotificationType
  NotificationSent NotificationSent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NotificationSent {
  id             Int       @id @default(autoincrement())
  notificationId Int
  recipentId     Int
  isRead         Boolean   @default(false)
  readTime       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  recipent     User         @relation(fields: [recipentId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  ORDER_STATUS
  REVIEW
}

enum PaymentType {
  CASH
  ONLINE
}

enum OrderStatus {
  IN_CART
  PROCESSING
  SHIPPING
  CANCELLED
  COMPLETED
}

enum PermMode {
  RO
  RW
}
